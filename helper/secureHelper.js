var crypto = require('crypto');

// 越大的数字意味着越安全
var config = {
	// 生成hash的长度
	hashBytes: 32,
	// 越长意味着你的密码越难被撞库
	saltBytes: 32,
	// 迭代次数越多越难背暴力破解
	iterations: 10000,
	digest: 'sha512'
};

/**
 * Hash a password using Node's asynchronous pbkdf2 (key derivation) function.
 *
 * Returns a self-contained buffer which can be arbitrarily encoded for storage
 * that contains all the data needed to verify a password.
 *
 * @param {!String} password
 * @param {!function(?Error, ?Buffer=)} callback
 */
function hashPassword(password, callback) {
	// generate a salt for pbkdf2
	crypto.randomBytes(config.saltBytes, function (err, salt) {
		if (err) {
			return callback(err);
		}

		crypto.pbkdf2(password, salt, config.iterations, config.hashBytes, config.digest,
			function (err, hash) {

				if (err) {
					return callback(err);
				}

				var combined = new Buffer(hash.length + salt.length + 8);

				// include the size of the salt so that we can, during verification,
				// figure out how much of the hash is salt
				combined.writeUInt32BE(salt.length, 0, true);
				// similarly, include the iteration count
				combined.writeUInt32BE(config.iterations, 4, true);

				salt.copy(combined, 8);
				hash.copy(combined, salt.length + 8);
				callback(null, combined);
			});
	});
}

/**
 * Verify a password using Node's asynchronous pbkdf2 (key derivation) function.
 *
 * Accepts a hash and salt generated by hashPassword, and returns whether the
 * hash matched the password (as a boolean).
 *
 * @param {!String} password
 * @param {!Buffer} combined Buffer containing hash and salt as generated by
 *   hashPassword.
 * @param {!function(?Error, !boolean)}
 */
function verifyPassword(password, combined, callback) {
	// extract the salt and hash from the combined buffer
	var saltBytes = combined.readUInt32BE(0);
	var iterations = combined.readUInt32BE(4);
	var hashBytes = combined.length - saltBytes - 8;
	var salt = combined.slice(8, saltBytes + 8);
	var hash = combined.toString('binary', saltBytes + 8);

	// verify the salt and hash against the password
	crypto.pbkdf2(password, salt, iterations, hashBytes, config.digest, function (err, verify) {
		if (err) {
			return callback(err, false);
		}

		callback(null, verify.toString('binary') === hash);
	});
}

exports.hashPassword = hashPassword;
exports.verifyPassword = verifyPassword;